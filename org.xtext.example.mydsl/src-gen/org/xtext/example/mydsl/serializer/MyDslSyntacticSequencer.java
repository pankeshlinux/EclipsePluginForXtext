/*
 * generated by Xtext
 */
package org.xtext.example.mydsl.serializer;

import com.google.inject.Inject;
import java.util.List;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.IGrammarAccess;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.nodemodel.INode;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.AbstractElementAlias;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.GroupAlias;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.TokenAlias;
import org.eclipse.xtext.serializer.analysis.ISyntacticSequencerPDAProvider.ISynNavigable;
import org.eclipse.xtext.serializer.analysis.ISyntacticSequencerPDAProvider.ISynTransition;
import org.eclipse.xtext.serializer.sequencer.AbstractSyntacticSequencer;
import org.xtext.example.mydsl.services.MyDslGrammarAccess;

@SuppressWarnings("all")
public class MyDslSyntacticSequencer extends AbstractSyntacticSequencer {

	protected MyDslGrammarAccess grammarAccess;
	protected AbstractElementAlias match_ArchSpec___InBuiltKeyword_5_0_ColonKeyword_5_1__a;
	protected AbstractElementAlias match_ArchSpec___StructsKeyword_0_0_ColonKeyword_0_1__q;
	
	@Inject
	protected void init(IGrammarAccess access) {
		grammarAccess = (MyDslGrammarAccess) access;
		match_ArchSpec___InBuiltKeyword_5_0_ColonKeyword_5_1__a = new GroupAlias(true, true, new TokenAlias(false, false, grammarAccess.getArchSpecAccess().getInBuiltKeyword_5_0()), new TokenAlias(false, false, grammarAccess.getArchSpecAccess().getColonKeyword_5_1()));
		match_ArchSpec___StructsKeyword_0_0_ColonKeyword_0_1__q = new GroupAlias(false, true, new TokenAlias(false, false, grammarAccess.getArchSpecAccess().getStructsKeyword_0_0()), new TokenAlias(false, false, grammarAccess.getArchSpecAccess().getColonKeyword_0_1()));
	}
	
	@Override
	protected String getUnassignedRuleCallToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if(ruleCall.getRule() == grammarAccess.getINTRule())
			return getINTToken(semanticObject, ruleCall, node);
		return "";
	}
	
	/**
	 * terminal INT returns ecore::EInt: ('0'..'9')+;
	 */
	protected String getINTToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "";
	}
	
	@Override
	protected void emitUnassignedTokens(EObject semanticObject, ISynTransition transition, INode fromNode, INode toNode) {
		if (transition.getAmbiguousSyntaxes().isEmpty()) return;
		List<INode> transitionNodes = collectNodes(fromNode, toNode);
		for (AbstractElementAlias syntax : transition.getAmbiguousSyntaxes()) {
			List<INode> syntaxNodes = getNodesFor(transitionNodes, syntax);
			if(match_ArchSpec___InBuiltKeyword_5_0_ColonKeyword_5_1__a.equals(syntax))
				emit_ArchSpec___InBuiltKeyword_5_0_ColonKeyword_5_1__a(semanticObject, getLastNavigableState(), syntaxNodes);
			else if(match_ArchSpec___StructsKeyword_0_0_ColonKeyword_0_1__q.equals(syntax))
				emit_ArchSpec___StructsKeyword_0_0_ColonKeyword_0_1__q(semanticObject, getLastNavigableState(), syntaxNodes);
			else acceptNodes(getLastNavigableState(), syntaxNodes);
		}
	}

	/**
	 * Ambiguous syntax:
	 *     ('InBuilt' ':')*
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) 'softwareComponents' ':' 'computationalService' ':' (ambiguity) 'Custom' ':' customComputationalService+=customComputationalService
	 *     (rule start) 'softwareComponents' ':' 'computationalService' ':' (ambiguity) inbuiltComputationalService+=InBuiltComputationalService
	 *     structs+=Struct 'softwareComponents' ':' 'computationalService' ':' (ambiguity) 'Custom' ':' customComputationalService+=customComputationalService
	 *     structs+=Struct 'softwareComponents' ':' 'computationalService' ':' (ambiguity) inbuiltComputationalService+=InBuiltComputationalService
	 */
	protected void emit_ArchSpec___InBuiltKeyword_5_0_ColonKeyword_5_1__a(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     ('structs' ':')?
	 *
	 * This ambiguous syntax occurs at:
	 *     structs+=Struct (ambiguity) structs+=Struct
	 */
	protected void emit_ArchSpec___StructsKeyword_0_0_ColonKeyword_0_1__q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
}

/*
 * generated by Xtext
 */
package org.xtext.example.mydsl.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import java.util.List;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;

import org.eclipse.xtext.common.services.TerminalsGrammarAccess;

@Singleton
public class MyDslGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class SpecElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Spec");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cVocSpecAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cVocSpecVocSpecParserRuleCall_0_0 = (RuleCall)cVocSpecAssignment_0.eContents().get(0);
		private final Assignment cInteractionSpecAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cInteractionSpecInteractionSpecParserRuleCall_1_0 = (RuleCall)cInteractionSpecAssignment_1.eContents().get(0);
		private final Assignment cArchSpecAssignment_2 = (Assignment)cAlternatives.eContents().get(2);
		private final RuleCall cArchSpecArchSpecParserRuleCall_2_0 = (RuleCall)cArchSpecAssignment_2.eContents().get(0);
		private final Assignment cNetworkSpecAssignment_3 = (Assignment)cAlternatives.eContents().get(3);
		private final RuleCall cNetworkSpecDeploymentSpecParserRuleCall_3_0 = (RuleCall)cNetworkSpecAssignment_3.eContents().get(0);
		
		//Spec:
		//	vocSpec=VocSpec | interactionSpec=InteractionSpec | archSpec=ArchSpec | networkSpec=DeploymentSpec;
		@Override public ParserRule getRule() { return rule; }

		//vocSpec=VocSpec | interactionSpec=InteractionSpec | archSpec=ArchSpec | networkSpec=DeploymentSpec
		public Alternatives getAlternatives() { return cAlternatives; }

		//vocSpec=VocSpec
		public Assignment getVocSpecAssignment_0() { return cVocSpecAssignment_0; }

		//VocSpec
		public RuleCall getVocSpecVocSpecParserRuleCall_0_0() { return cVocSpecVocSpecParserRuleCall_0_0; }

		//interactionSpec=InteractionSpec
		public Assignment getInteractionSpecAssignment_1() { return cInteractionSpecAssignment_1; }

		//InteractionSpec
		public RuleCall getInteractionSpecInteractionSpecParserRuleCall_1_0() { return cInteractionSpecInteractionSpecParserRuleCall_1_0; }

		//archSpec=ArchSpec
		public Assignment getArchSpecAssignment_2() { return cArchSpecAssignment_2; }

		//ArchSpec
		public RuleCall getArchSpecArchSpecParserRuleCall_2_0() { return cArchSpecArchSpecParserRuleCall_2_0; }

		//networkSpec=DeploymentSpec
		public Assignment getNetworkSpecAssignment_3() { return cNetworkSpecAssignment_3; }

		//DeploymentSpec
		public RuleCall getNetworkSpecDeploymentSpecParserRuleCall_3_0() { return cNetworkSpecDeploymentSpecParserRuleCall_3_0; }
	}

	public class DeploymentSpecElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "DeploymentSpec");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cDevicesKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cDevicesAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cDevicesDeviceParserRuleCall_2_0 = (RuleCall)cDevicesAssignment_2.eContents().get(0);
		
		//DeploymentSpec:
		//	"devices" ":" devices+=Device+;
		@Override public ParserRule getRule() { return rule; }

		//"devices" ":" devices+=Device+
		public Group getGroup() { return cGroup; }

		//"devices"
		public Keyword getDevicesKeyword_0() { return cDevicesKeyword_0; }

		//":"
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }

		//devices+=Device+
		public Assignment getDevicesAssignment_2() { return cDevicesAssignment_2; }

		//Device
		public RuleCall getDevicesDeviceParserRuleCall_2_0() { return cDevicesDeviceParserRuleCall_2_0; }
	}

	public class DeviceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Device");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cDeviceNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cDeviceNameIDTerminalRuleCall_0_0 = (RuleCall)cDeviceNameAssignment_0.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLocationKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cColonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cDeviceLocationAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cDeviceLocationDeviceLocationParserRuleCall_4_0 = (RuleCall)cDeviceLocationAssignment_4.eContents().get(0);
		private final Keyword cPlatformKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Keyword cColonKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Assignment cPlatformTypeAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cPlatformTypePlatformTypeParserRuleCall_7_0 = (RuleCall)cPlatformTypeAssignment_7.eContents().get(0);
		private final Keyword cSemicolonKeyword_8 = (Keyword)cGroup.eContents().get(8);
		private final Keyword cResourcesKeyword_9 = (Keyword)cGroup.eContents().get(9);
		private final Keyword cColonKeyword_10 = (Keyword)cGroup.eContents().get(10);
		private final Assignment cDeviceAbilitiesAssignment_11 = (Assignment)cGroup.eContents().get(11);
		private final RuleCall cDeviceAbilitiesDeviceAbilitiesParserRuleCall_11_0 = (RuleCall)cDeviceAbilitiesAssignment_11.eContents().get(0);
		private final Keyword cSemicolonKeyword_12 = (Keyword)cGroup.eContents().get(12);
		private final Keyword cProtocolKeyword_13 = (Keyword)cGroup.eContents().get(13);
		private final Keyword cColonKeyword_14 = (Keyword)cGroup.eContents().get(14);
		private final Assignment cDeviceProtocolAssignment_15 = (Assignment)cGroup.eContents().get(15);
		private final RuleCall cDeviceProtocolDeviceProtocolParserRuleCall_15_0 = (RuleCall)cDeviceProtocolAssignment_15.eContents().get(0);
		private final Group cGroup_16 = (Group)cGroup.eContents().get(16);
		private final Keyword cDatabaseKeyword_16_0 = (Keyword)cGroup_16.eContents().get(0);
		private final Keyword cColonKeyword_16_1 = (Keyword)cGroup_16.eContents().get(1);
		private final Assignment cDatabaseNameAssignment_16_2 = (Assignment)cGroup_16.eContents().get(2);
		private final RuleCall cDatabaseNameDatabaseNameParserRuleCall_16_2_0 = (RuleCall)cDatabaseNameAssignment_16_2.eContents().get(0);
		private final Keyword cSemicolonKeyword_16_3 = (Keyword)cGroup_16.eContents().get(3);
		private final Keyword cDescriptionKeyword_17 = (Keyword)cGroup.eContents().get(17);
		private final Keyword cColonKeyword_18 = (Keyword)cGroup.eContents().get(18);
		private final Assignment cDeviceDescriptionAssignment_19 = (Assignment)cGroup.eContents().get(19);
		private final RuleCall cDeviceDescriptionDeviceDescriptionParserRuleCall_19_0 = (RuleCall)cDeviceDescriptionAssignment_19.eContents().get(0);
		private final Keyword cSemicolonKeyword_20 = (Keyword)cGroup.eContents().get(20);
		
		//Device:
		//	deviceName=ID ":" "location" ":" deviceLocation+=DeviceLocation "platform" ":" platformType+=PlatformType ";"
		//	"resources" ":" deviceAbilities+=DeviceAbilities? ";" "protocol" ":" deviceProtocol+=DeviceProtocol ("database" ":"
		//	databaseName+=DatabaseName ";")* "description" ":" deviceDescription+=DeviceDescription ";";
		@Override public ParserRule getRule() { return rule; }

		//deviceName=ID ":" "location" ":" deviceLocation+=DeviceLocation "platform" ":" platformType+=PlatformType ";"
		//"resources" ":" deviceAbilities+=DeviceAbilities? ";" "protocol" ":" deviceProtocol+=DeviceProtocol ("database" ":"
		//databaseName+=DatabaseName ";")* "description" ":" deviceDescription+=DeviceDescription ";"
		public Group getGroup() { return cGroup; }

		//deviceName=ID
		public Assignment getDeviceNameAssignment_0() { return cDeviceNameAssignment_0; }

		//ID
		public RuleCall getDeviceNameIDTerminalRuleCall_0_0() { return cDeviceNameIDTerminalRuleCall_0_0; }

		//":"
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }

		//"location"
		public Keyword getLocationKeyword_2() { return cLocationKeyword_2; }

		//":"
		public Keyword getColonKeyword_3() { return cColonKeyword_3; }

		//deviceLocation+=DeviceLocation
		public Assignment getDeviceLocationAssignment_4() { return cDeviceLocationAssignment_4; }

		//DeviceLocation
		public RuleCall getDeviceLocationDeviceLocationParserRuleCall_4_0() { return cDeviceLocationDeviceLocationParserRuleCall_4_0; }

		//"platform"
		public Keyword getPlatformKeyword_5() { return cPlatformKeyword_5; }

		//":"
		public Keyword getColonKeyword_6() { return cColonKeyword_6; }

		//platformType+=PlatformType
		public Assignment getPlatformTypeAssignment_7() { return cPlatformTypeAssignment_7; }

		//PlatformType
		public RuleCall getPlatformTypePlatformTypeParserRuleCall_7_0() { return cPlatformTypePlatformTypeParserRuleCall_7_0; }

		//";"
		public Keyword getSemicolonKeyword_8() { return cSemicolonKeyword_8; }

		//"resources"
		public Keyword getResourcesKeyword_9() { return cResourcesKeyword_9; }

		//":"
		public Keyword getColonKeyword_10() { return cColonKeyword_10; }

		//deviceAbilities+=DeviceAbilities?
		public Assignment getDeviceAbilitiesAssignment_11() { return cDeviceAbilitiesAssignment_11; }

		//DeviceAbilities
		public RuleCall getDeviceAbilitiesDeviceAbilitiesParserRuleCall_11_0() { return cDeviceAbilitiesDeviceAbilitiesParserRuleCall_11_0; }

		//";"
		public Keyword getSemicolonKeyword_12() { return cSemicolonKeyword_12; }

		//"protocol"
		public Keyword getProtocolKeyword_13() { return cProtocolKeyword_13; }

		//":"
		public Keyword getColonKeyword_14() { return cColonKeyword_14; }

		//deviceProtocol+=DeviceProtocol
		public Assignment getDeviceProtocolAssignment_15() { return cDeviceProtocolAssignment_15; }

		//DeviceProtocol
		public RuleCall getDeviceProtocolDeviceProtocolParserRuleCall_15_0() { return cDeviceProtocolDeviceProtocolParserRuleCall_15_0; }

		//("database" ":" databaseName+=DatabaseName ";")*
		public Group getGroup_16() { return cGroup_16; }

		//"database"
		public Keyword getDatabaseKeyword_16_0() { return cDatabaseKeyword_16_0; }

		//":"
		public Keyword getColonKeyword_16_1() { return cColonKeyword_16_1; }

		//databaseName+=DatabaseName
		public Assignment getDatabaseNameAssignment_16_2() { return cDatabaseNameAssignment_16_2; }

		//DatabaseName
		public RuleCall getDatabaseNameDatabaseNameParserRuleCall_16_2_0() { return cDatabaseNameDatabaseNameParserRuleCall_16_2_0; }

		//";"
		public Keyword getSemicolonKeyword_16_3() { return cSemicolonKeyword_16_3; }

		//"description"
		public Keyword getDescriptionKeyword_17() { return cDescriptionKeyword_17; }

		//":"
		public Keyword getColonKeyword_18() { return cColonKeyword_18; }

		//deviceDescription+=DeviceDescription
		public Assignment getDeviceDescriptionAssignment_19() { return cDeviceDescriptionAssignment_19; }

		//DeviceDescription
		public RuleCall getDeviceDescriptionDeviceDescriptionParserRuleCall_19_0() { return cDeviceDescriptionDeviceDescriptionParserRuleCall_19_0; }

		//";"
		public Keyword getSemicolonKeyword_20() { return cSemicolonKeyword_20; }
	}

	public class DeviceDescriptionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "DeviceDescription");
		private final Assignment cDevicedescriptionTextAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cDevicedescriptionTextSTRINGTerminalRuleCall_0 = (RuleCall)cDevicedescriptionTextAssignment.eContents().get(0);
		
		//DeviceDescription:
		//	devicedescriptionText=STRING;
		@Override public ParserRule getRule() { return rule; }

		//devicedescriptionText=STRING
		public Assignment getDevicedescriptionTextAssignment() { return cDevicedescriptionTextAssignment; }

		//STRING
		public RuleCall getDevicedescriptionTextSTRINGTerminalRuleCall_0() { return cDevicedescriptionTextSTRINGTerminalRuleCall_0; }
	}

	public class DeviceLocationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "DeviceLocation");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cRegionLabelAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cRegionLabelIDTerminalRuleCall_0_0 = (RuleCall)cRegionLabelAssignment_0.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cRegionValueAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cRegionValueINTTerminalRuleCall_2_0 = (RuleCall)cRegionValueAssignment_2.eContents().get(0);
		private final Keyword cSemicolonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//DeviceLocation:
		//	regionLabel=ID ":" regionValue=INT ";";
		@Override public ParserRule getRule() { return rule; }

		//regionLabel=ID ":" regionValue=INT ";"
		public Group getGroup() { return cGroup; }

		//regionLabel=ID
		public Assignment getRegionLabelAssignment_0() { return cRegionLabelAssignment_0; }

		//ID
		public RuleCall getRegionLabelIDTerminalRuleCall_0_0() { return cRegionLabelIDTerminalRuleCall_0_0; }

		//":"
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }

		//regionValue=INT
		public Assignment getRegionValueAssignment_2() { return cRegionValueAssignment_2; }

		//INT
		public RuleCall getRegionValueINTTerminalRuleCall_2_0() { return cRegionValueINTTerminalRuleCall_2_0; }

		//";"
		public Keyword getSemicolonKeyword_3() { return cSemicolonKeyword_3; }
	}

	public class PlatformTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "PlatformType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cDeviceTypeAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final Keyword cDeviceTypeJavaSEKeyword_0_0 = (Keyword)cDeviceTypeAssignment_0.eContents().get(0);
		private final Assignment cDeviceTypeAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final Keyword cDeviceTypeAndroidKeyword_1_0 = (Keyword)cDeviceTypeAssignment_1.eContents().get(0);
		
		//PlatformType:
		//	deviceType="JavaSE" | deviceType="Android";
		@Override public ParserRule getRule() { return rule; }

		//deviceType="JavaSE" | deviceType="Android"
		public Alternatives getAlternatives() { return cAlternatives; }

		//deviceType="JavaSE"
		public Assignment getDeviceTypeAssignment_0() { return cDeviceTypeAssignment_0; }

		//"JavaSE"
		public Keyword getDeviceTypeJavaSEKeyword_0_0() { return cDeviceTypeJavaSEKeyword_0_0; }

		//deviceType="Android"
		public Assignment getDeviceTypeAssignment_1() { return cDeviceTypeAssignment_1; }

		//"Android"
		public Keyword getDeviceTypeAndroidKeyword_1_0() { return cDeviceTypeAndroidKeyword_1_0; }
	}

	public class DatabaseNameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "DatabaseName");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cInstalledDatabaseAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final Keyword cInstalledDatabaseMySQLKeyword_0_0 = (Keyword)cInstalledDatabaseAssignment_0.eContents().get(0);
		private final Assignment cInstalledDatabaseAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final Keyword cInstalledDatabaseSQLAzureKeyword_1_0 = (Keyword)cInstalledDatabaseAssignment_1.eContents().get(0);
		private final Assignment cInstalledDatabaseAssignment_2 = (Assignment)cAlternatives.eContents().get(2);
		private final Keyword cInstalledDatabaseMongoDBKeyword_2_0 = (Keyword)cInstalledDatabaseAssignment_2.eContents().get(0);
		
		//DatabaseName:
		//	installedDatabase="MySQL" | installedDatabase="SQLAzure" | installedDatabase="MongoDB";
		@Override public ParserRule getRule() { return rule; }

		//installedDatabase="MySQL" | installedDatabase="SQLAzure" | installedDatabase="MongoDB"
		public Alternatives getAlternatives() { return cAlternatives; }

		//installedDatabase="MySQL"
		public Assignment getInstalledDatabaseAssignment_0() { return cInstalledDatabaseAssignment_0; }

		//"MySQL"
		public Keyword getInstalledDatabaseMySQLKeyword_0_0() { return cInstalledDatabaseMySQLKeyword_0_0; }

		//installedDatabase="SQLAzure"
		public Assignment getInstalledDatabaseAssignment_1() { return cInstalledDatabaseAssignment_1; }

		//"SQLAzure"
		public Keyword getInstalledDatabaseSQLAzureKeyword_1_0() { return cInstalledDatabaseSQLAzureKeyword_1_0; }

		//installedDatabase="MongoDB"
		public Assignment getInstalledDatabaseAssignment_2() { return cInstalledDatabaseAssignment_2; }

		//"MongoDB"
		public Keyword getInstalledDatabaseMongoDBKeyword_2_0() { return cInstalledDatabaseMongoDBKeyword_2_0; }
	}

	public class DeviceProtocolElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "DeviceProtocol");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cProtocolNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cProtocolNameMqttKeyword_0_0 = (Keyword)cProtocolNameAssignment_0.eContents().get(0);
		private final Keyword cSemicolonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//DeviceProtocol:
		//	protocolName="mqtt" ";";
		@Override public ParserRule getRule() { return rule; }

		//protocolName="mqtt" ";"
		public Group getGroup() { return cGroup; }

		//protocolName="mqtt"
		public Assignment getProtocolNameAssignment_0() { return cProtocolNameAssignment_0; }

		//"mqtt"
		public Keyword getProtocolNameMqttKeyword_0_0() { return cProtocolNameMqttKeyword_0_0; }

		//";"
		public Keyword getSemicolonKeyword_1() { return cSemicolonKeyword_1; }
	}

	public class DeviceAbilitiesElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "DeviceAbilities");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cDeviceEntityNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cDeviceEntityNameEntityNameCrossReference_0_0 = (CrossReference)cDeviceEntityNameAssignment_0.eContents().get(0);
		private final RuleCall cDeviceEntityNameEntityNameIDTerminalRuleCall_0_0_1 = (RuleCall)cDeviceEntityNameEntityNameCrossReference_0_0.eContents().get(1);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cCommaKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cNameAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cNameDeviceAbilitiesParserRuleCall_1_1_0 = (RuleCall)cNameAssignment_1_1.eContents().get(0);
		
		//DeviceAbilities:
		//	deviceEntityName=[EntityName] ("," name=DeviceAbilities)?;
		@Override public ParserRule getRule() { return rule; }

		//deviceEntityName=[EntityName] ("," name=DeviceAbilities)?
		public Group getGroup() { return cGroup; }

		//deviceEntityName=[EntityName]
		public Assignment getDeviceEntityNameAssignment_0() { return cDeviceEntityNameAssignment_0; }

		//[EntityName]
		public CrossReference getDeviceEntityNameEntityNameCrossReference_0_0() { return cDeviceEntityNameEntityNameCrossReference_0_0; }

		//ID
		public RuleCall getDeviceEntityNameEntityNameIDTerminalRuleCall_0_0_1() { return cDeviceEntityNameEntityNameIDTerminalRuleCall_0_0_1; }

		//("," name=DeviceAbilities)?
		public Group getGroup_1() { return cGroup_1; }

		//","
		public Keyword getCommaKeyword_1_0() { return cCommaKeyword_1_0; }

		//name=DeviceAbilities
		public Assignment getNameAssignment_1_1() { return cNameAssignment_1_1; }

		//DeviceAbilities
		public RuleCall getNameDeviceAbilitiesParserRuleCall_1_1_0() { return cNameDeviceAbilitiesParserRuleCall_1_1_0; }
	}

	public class InteractionSpecElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "InteractionSpec");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cResourcesKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cUserInteractionsKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cColonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cInteractionNameAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cInteractionNameEntityNameParserRuleCall_4_0 = (RuleCall)cInteractionNameAssignment_4.eContents().get(0);
		private final Assignment cInteractionCommandAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cInteractionCommandCommandParserRuleCall_5_0 = (RuleCall)cInteractionCommandAssignment_5.eContents().get(0);
		private final Assignment cInteractionRequestAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cInteractionRequestRequestParserRuleCall_6_0 = (RuleCall)cInteractionRequestAssignment_6.eContents().get(0);
		private final Assignment cInteractionNotifyAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cInteractionNotifyInteractionActionParserRuleCall_7_0 = (RuleCall)cInteractionNotifyAssignment_7.eContents().get(0);
		
		//InteractionSpec:
		//	"resources" ":" "userInteractions" ":" interactionName=EntityName interactionCommand+=Command*
		//	interactionRequest+=Request* interactionNotify+=InteractionAction*;
		@Override public ParserRule getRule() { return rule; }

		//"resources" ":" "userInteractions" ":" interactionName=EntityName interactionCommand+=Command*
		//interactionRequest+=Request* interactionNotify+=InteractionAction*
		public Group getGroup() { return cGroup; }

		//"resources"
		public Keyword getResourcesKeyword_0() { return cResourcesKeyword_0; }

		//":"
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }

		//"userInteractions"
		public Keyword getUserInteractionsKeyword_2() { return cUserInteractionsKeyword_2; }

		//":"
		public Keyword getColonKeyword_3() { return cColonKeyword_3; }

		//interactionName=EntityName
		public Assignment getInteractionNameAssignment_4() { return cInteractionNameAssignment_4; }

		//EntityName
		public RuleCall getInteractionNameEntityNameParserRuleCall_4_0() { return cInteractionNameEntityNameParserRuleCall_4_0; }

		//interactionCommand+=Command*
		public Assignment getInteractionCommandAssignment_5() { return cInteractionCommandAssignment_5; }

		//Command
		public RuleCall getInteractionCommandCommandParserRuleCall_5_0() { return cInteractionCommandCommandParserRuleCall_5_0; }

		//interactionRequest+=Request*
		public Assignment getInteractionRequestAssignment_6() { return cInteractionRequestAssignment_6; }

		//Request
		public RuleCall getInteractionRequestRequestParserRuleCall_6_0() { return cInteractionRequestRequestParserRuleCall_6_0; }

		//interactionNotify+=InteractionAction*
		public Assignment getInteractionNotifyAssignment_7() { return cInteractionNotifyAssignment_7; }

		//InteractionAction
		public RuleCall getInteractionNotifyInteractionActionParserRuleCall_7_0() { return cInteractionNotifyInteractionActionParserRuleCall_7_0; }
	}

	public class InteractionActionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "InteractionAction");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cNotifyKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cActionNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cActionNameActionNameParserRuleCall_1_0 = (RuleCall)cActionNameAssignment_1.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cParametersAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cParametersParametersParserRuleCall_3_0 = (RuleCall)cParametersAssignment_3.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Keyword cFromKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cInteractionEntityAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final CrossReference cInteractionEntityEntityNameCrossReference_6_0 = (CrossReference)cInteractionEntityAssignment_6.eContents().get(0);
		private final RuleCall cInteractionEntityEntityNameIDTerminalRuleCall_6_0_1 = (RuleCall)cInteractionEntityEntityNameCrossReference_6_0.eContents().get(1);
		private final Keyword cSemicolonKeyword_7 = (Keyword)cGroup.eContents().get(7);
		
		//InteractionAction:
		//	"notify" actionName=ActionName "(" parameters+=Parameters* ")" "from" interactionEntity=[EntityName] ";";
		@Override public ParserRule getRule() { return rule; }

		//"notify" actionName=ActionName "(" parameters+=Parameters* ")" "from" interactionEntity=[EntityName] ";"
		public Group getGroup() { return cGroup; }

		//"notify"
		public Keyword getNotifyKeyword_0() { return cNotifyKeyword_0; }

		//actionName=ActionName
		public Assignment getActionNameAssignment_1() { return cActionNameAssignment_1; }

		//ActionName
		public RuleCall getActionNameActionNameParserRuleCall_1_0() { return cActionNameActionNameParserRuleCall_1_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_2() { return cLeftParenthesisKeyword_2; }

		//parameters+=Parameters*
		public Assignment getParametersAssignment_3() { return cParametersAssignment_3; }

		//Parameters
		public RuleCall getParametersParametersParserRuleCall_3_0() { return cParametersParametersParserRuleCall_3_0; }

		//")"
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }

		//"from"
		public Keyword getFromKeyword_5() { return cFromKeyword_5; }

		//interactionEntity=[EntityName]
		public Assignment getInteractionEntityAssignment_6() { return cInteractionEntityAssignment_6; }

		//[EntityName]
		public CrossReference getInteractionEntityEntityNameCrossReference_6_0() { return cInteractionEntityEntityNameCrossReference_6_0; }

		//ID
		public RuleCall getInteractionEntityEntityNameIDTerminalRuleCall_6_0_1() { return cInteractionEntityEntityNameIDTerminalRuleCall_6_0_1; }

		//";"
		public Keyword getSemicolonKeyword_7() { return cSemicolonKeyword_7; }
	}

	public class ArchSpecElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ArchSpec");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cGroup.eContents().get(0);
		private final Keyword cStructsKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final Keyword cColonKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Assignment cStructsAssignment_0_2 = (Assignment)cGroup_0.eContents().get(2);
		private final RuleCall cStructsStructParserRuleCall_0_2_0 = (RuleCall)cStructsAssignment_0_2.eContents().get(0);
		private final Keyword cSoftwareComponentsKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cColonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cComputationalServiceKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Keyword cColonKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cInBuiltKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Keyword cColonKeyword_5_1 = (Keyword)cGroup_5.eContents().get(1);
		private final Assignment cInbuiltComputationalServiceAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cInbuiltComputationalServiceInBuiltComputationalServiceParserRuleCall_6_0 = (RuleCall)cInbuiltComputationalServiceAssignment_6.eContents().get(0);
		private final Keyword cCustomKeyword_7 = (Keyword)cGroup.eContents().get(7);
		private final Keyword cColonKeyword_8 = (Keyword)cGroup.eContents().get(8);
		private final Assignment cCustomComputationalServiceAssignment_9 = (Assignment)cGroup.eContents().get(9);
		private final RuleCall cCustomComputationalServiceCustomComputationalServiceParserRuleCall_9_0 = (RuleCall)cCustomComputationalServiceAssignment_9.eContents().get(0);
		
		//ArchSpec:
		//	("structs" ":" structs+=Struct+)* "softwareComponents" ":" "computationalService" ":" ("InBuilt" ":")*
		//	inbuiltComputationalService+=InBuiltComputationalService* "Custom" ":"
		//	customComputationalService+=customComputationalService+;
		@Override public ParserRule getRule() { return rule; }

		//("structs" ":" structs+=Struct+)* "softwareComponents" ":" "computationalService" ":" ("InBuilt" ":")*
		//inbuiltComputationalService+=InBuiltComputationalService* "Custom" ":"
		//customComputationalService+=customComputationalService+
		public Group getGroup() { return cGroup; }

		//("structs" ":" structs+=Struct+)*
		public Group getGroup_0() { return cGroup_0; }

		//"structs"
		public Keyword getStructsKeyword_0_0() { return cStructsKeyword_0_0; }

		//":"
		public Keyword getColonKeyword_0_1() { return cColonKeyword_0_1; }

		//structs+=Struct+
		public Assignment getStructsAssignment_0_2() { return cStructsAssignment_0_2; }

		//Struct
		public RuleCall getStructsStructParserRuleCall_0_2_0() { return cStructsStructParserRuleCall_0_2_0; }

		//"softwareComponents"
		public Keyword getSoftwareComponentsKeyword_1() { return cSoftwareComponentsKeyword_1; }

		//":"
		public Keyword getColonKeyword_2() { return cColonKeyword_2; }

		//"computationalService"
		public Keyword getComputationalServiceKeyword_3() { return cComputationalServiceKeyword_3; }

		//":"
		public Keyword getColonKeyword_4() { return cColonKeyword_4; }

		//("InBuilt" ":")*
		public Group getGroup_5() { return cGroup_5; }

		//"InBuilt"
		public Keyword getInBuiltKeyword_5_0() { return cInBuiltKeyword_5_0; }

		//":"
		public Keyword getColonKeyword_5_1() { return cColonKeyword_5_1; }

		//inbuiltComputationalService+=InBuiltComputationalService*
		public Assignment getInbuiltComputationalServiceAssignment_6() { return cInbuiltComputationalServiceAssignment_6; }

		//InBuiltComputationalService
		public RuleCall getInbuiltComputationalServiceInBuiltComputationalServiceParserRuleCall_6_0() { return cInbuiltComputationalServiceInBuiltComputationalServiceParserRuleCall_6_0; }

		//"Custom"
		public Keyword getCustomKeyword_7() { return cCustomKeyword_7; }

		//":"
		public Keyword getColonKeyword_8() { return cColonKeyword_8; }

		//customComputationalService+=customComputationalService+
		public Assignment getCustomComputationalServiceAssignment_9() { return cCustomComputationalServiceAssignment_9; }

		//customComputationalService
		public RuleCall getCustomComputationalServiceCustomComputationalServiceParserRuleCall_9_0() { return cCustomComputationalServiceCustomComputationalServiceParserRuleCall_9_0; }
	}

	public class InBuiltComputationalServiceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "InBuiltComputationalService");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cInBuiltComputationalServiceNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cInBuiltComputationalServiceNameEntityNameParserRuleCall_0_0 = (RuleCall)cInBuiltComputationalServiceNameAssignment_0.eContents().get(0);
		private final Assignment cConsumesAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cConsumesConsumeForInBuiltParserRuleCall_1_0 = (RuleCall)cConsumesAssignment_1.eContents().get(0);
		private final Keyword cCOMPUTEKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cLeftParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cOperationNameAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cOperationNameOperationNameParserRuleCall_4_0 = (RuleCall)cOperationNameAssignment_4.eContents().get(0);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cCommaKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Assignment cOperationParameterAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final RuleCall cOperationParameterINTTerminalRuleCall_5_1_0 = (RuleCall)cOperationParameterAssignment_5_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Keyword cSemicolonKeyword_7 = (Keyword)cGroup.eContents().get(7);
		private final Assignment cGenerateInfoAssignment_8 = (Assignment)cGroup.eContents().get(8);
		private final RuleCall cGenerateInfoGenerateParserRuleCall_8_0 = (RuleCall)cGenerateInfoAssignment_8.eContents().get(0);
		
		//InBuiltComputationalService:
		//	inBuiltComputationalServiceName=EntityName consumes+=ConsumeForInBuilt+ "COMPUTE" "(" operationName=OperationName
		//	("," operationParameter=INT)? ")" ";" generateInfo+=Generate+;
		@Override public ParserRule getRule() { return rule; }

		//inBuiltComputationalServiceName=EntityName consumes+=ConsumeForInBuilt+ "COMPUTE" "(" operationName=OperationName (","
		//operationParameter=INT)? ")" ";" generateInfo+=Generate+
		public Group getGroup() { return cGroup; }

		//inBuiltComputationalServiceName=EntityName
		public Assignment getInBuiltComputationalServiceNameAssignment_0() { return cInBuiltComputationalServiceNameAssignment_0; }

		//EntityName
		public RuleCall getInBuiltComputationalServiceNameEntityNameParserRuleCall_0_0() { return cInBuiltComputationalServiceNameEntityNameParserRuleCall_0_0; }

		//consumes+=ConsumeForInBuilt+
		public Assignment getConsumesAssignment_1() { return cConsumesAssignment_1; }

		//ConsumeForInBuilt
		public RuleCall getConsumesConsumeForInBuiltParserRuleCall_1_0() { return cConsumesConsumeForInBuiltParserRuleCall_1_0; }

		//"COMPUTE"
		public Keyword getCOMPUTEKeyword_2() { return cCOMPUTEKeyword_2; }

		//"("
		public Keyword getLeftParenthesisKeyword_3() { return cLeftParenthesisKeyword_3; }

		//operationName=OperationName
		public Assignment getOperationNameAssignment_4() { return cOperationNameAssignment_4; }

		//OperationName
		public RuleCall getOperationNameOperationNameParserRuleCall_4_0() { return cOperationNameOperationNameParserRuleCall_4_0; }

		//("," operationParameter=INT)?
		public Group getGroup_5() { return cGroup_5; }

		//","
		public Keyword getCommaKeyword_5_0() { return cCommaKeyword_5_0; }

		//operationParameter=INT
		public Assignment getOperationParameterAssignment_5_1() { return cOperationParameterAssignment_5_1; }

		//INT
		public RuleCall getOperationParameterINTTerminalRuleCall_5_1_0() { return cOperationParameterINTTerminalRuleCall_5_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_6() { return cRightParenthesisKeyword_6; }

		//";"
		public Keyword getSemicolonKeyword_7() { return cSemicolonKeyword_7; }

		//generateInfo+=Generate+
		public Assignment getGenerateInfoAssignment_8() { return cGenerateInfoAssignment_8; }

		//Generate
		public RuleCall getGenerateInfoGenerateParserRuleCall_8_0() { return cGenerateInfoGenerateParserRuleCall_8_0; }
	}

	public class CustomComputationalServiceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "customComputationalService");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cCustomComputationalServiceNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cCustomComputationalServiceNameEntityNameParserRuleCall_0_0 = (RuleCall)cCustomComputationalServiceNameAssignment_0.eContents().get(0);
		private final Assignment cConsumesAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cConsumesConsumeParserRuleCall_1_0 = (RuleCall)cConsumesAssignment_1.eContents().get(0);
		private final Assignment cRequestsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cRequestsRequestParserRuleCall_2_0 = (RuleCall)cRequestsAssignment_2.eContents().get(0);
		private final Assignment cGenerateInfoAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cGenerateInfoGenerateParserRuleCall_3_0 = (RuleCall)cGenerateInfoAssignment_3.eContents().get(0);
		private final Assignment cCommandsAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cCommandsCommandParserRuleCall_4_0 = (RuleCall)cCommandsAssignment_4.eContents().get(0);
		
		//customComputationalService:
		//	customComputationalServiceName=EntityName consumes+=Consume+ requests+=Request* generateInfo+=Generate*
		//	commands+=Command*;
		@Override public ParserRule getRule() { return rule; }

		//customComputationalServiceName=EntityName consumes+=Consume+ requests+=Request* generateInfo+=Generate*
		//commands+=Command*
		public Group getGroup() { return cGroup; }

		//customComputationalServiceName=EntityName
		public Assignment getCustomComputationalServiceNameAssignment_0() { return cCustomComputationalServiceNameAssignment_0; }

		//EntityName
		public RuleCall getCustomComputationalServiceNameEntityNameParserRuleCall_0_0() { return cCustomComputationalServiceNameEntityNameParserRuleCall_0_0; }

		//consumes+=Consume+
		public Assignment getConsumesAssignment_1() { return cConsumesAssignment_1; }

		//Consume
		public RuleCall getConsumesConsumeParserRuleCall_1_0() { return cConsumesConsumeParserRuleCall_1_0; }

		//requests+=Request*
		public Assignment getRequestsAssignment_2() { return cRequestsAssignment_2; }

		//Request
		public RuleCall getRequestsRequestParserRuleCall_2_0() { return cRequestsRequestParserRuleCall_2_0; }

		//generateInfo+=Generate*
		public Assignment getGenerateInfoAssignment_3() { return cGenerateInfoAssignment_3; }

		//Generate
		public RuleCall getGenerateInfoGenerateParserRuleCall_3_0() { return cGenerateInfoGenerateParserRuleCall_3_0; }

		//commands+=Command*
		public Assignment getCommandsAssignment_4() { return cCommandsAssignment_4; }

		//Command
		public RuleCall getCommandsCommandParserRuleCall_4_0() { return cCommandsCommandParserRuleCall_4_0; }
	}

	public class RequestElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Request");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cRequestKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cRequestnameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cRequestnameSourceNameCrossReference_1_0 = (CrossReference)cRequestnameAssignment_1.eContents().get(0);
		private final RuleCall cRequestnameSourceNameIDTerminalRuleCall_1_0_1 = (RuleCall)cRequestnameSourceNameCrossReference_1_0.eContents().get(1);
		private final Keyword cToKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cStorageForRequestAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final CrossReference cStorageForRequestEntityNameCrossReference_3_0 = (CrossReference)cStorageForRequestAssignment_3.eContents().get(0);
		private final RuleCall cStorageForRequestEntityNameIDTerminalRuleCall_3_0_1 = (RuleCall)cStorageForRequestEntityNameCrossReference_3_0.eContents().get(1);
		private final Keyword cSemicolonKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//Request:
		//	"request" requestname=[SourceName] "to" storageForRequest=[EntityName] ";";
		@Override public ParserRule getRule() { return rule; }

		//"request" requestname=[SourceName] "to" storageForRequest=[EntityName] ";"
		public Group getGroup() { return cGroup; }

		//"request"
		public Keyword getRequestKeyword_0() { return cRequestKeyword_0; }

		//requestname=[SourceName]
		public Assignment getRequestnameAssignment_1() { return cRequestnameAssignment_1; }

		//[SourceName]
		public CrossReference getRequestnameSourceNameCrossReference_1_0() { return cRequestnameSourceNameCrossReference_1_0; }

		//ID
		public RuleCall getRequestnameSourceNameIDTerminalRuleCall_1_0_1() { return cRequestnameSourceNameIDTerminalRuleCall_1_0_1; }

		//"to"
		public Keyword getToKeyword_2() { return cToKeyword_2; }

		//storageForRequest=[EntityName]
		public Assignment getStorageForRequestAssignment_3() { return cStorageForRequestAssignment_3; }

		//[EntityName]
		public CrossReference getStorageForRequestEntityNameCrossReference_3_0() { return cStorageForRequestEntityNameCrossReference_3_0; }

		//ID
		public RuleCall getStorageForRequestEntityNameIDTerminalRuleCall_3_0_1() { return cStorageForRequestEntityNameIDTerminalRuleCall_3_0_1; }

		//";"
		public Keyword getSemicolonKeyword_4() { return cSemicolonKeyword_4; }
	}

	public class ConsumeForInBuiltElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ConsumeForInBuilt");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cConsumeKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cNameSourceNameCrossReference_1_0 = (CrossReference)cNameAssignment_1.eContents().get(0);
		private final RuleCall cNameSourceNameIDTerminalRuleCall_1_0_1 = (RuleCall)cNameSourceNameCrossReference_1_0.eContents().get(1);
		private final Keyword cFromKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cSensorForConsumeAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final CrossReference cSensorForConsumeEntityNameCrossReference_3_0 = (CrossReference)cSensorForConsumeAssignment_3.eContents().get(0);
		private final RuleCall cSensorForConsumeEntityNameIDTerminalRuleCall_3_0_1 = (RuleCall)cSensorForConsumeEntityNameCrossReference_3_0.eContents().get(1);
		private final Keyword cSemicolonKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//ConsumeForInBuilt:
		//	"consume" name=[SourceName] "from" SensorForConsume=[EntityName] ";";
		@Override public ParserRule getRule() { return rule; }

		//"consume" name=[SourceName] "from" SensorForConsume=[EntityName] ";"
		public Group getGroup() { return cGroup; }

		//"consume"
		public Keyword getConsumeKeyword_0() { return cConsumeKeyword_0; }

		//name=[SourceName]
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//[SourceName]
		public CrossReference getNameSourceNameCrossReference_1_0() { return cNameSourceNameCrossReference_1_0; }

		//ID
		public RuleCall getNameSourceNameIDTerminalRuleCall_1_0_1() { return cNameSourceNameIDTerminalRuleCall_1_0_1; }

		//"from"
		public Keyword getFromKeyword_2() { return cFromKeyword_2; }

		//SensorForConsume=[EntityName]
		public Assignment getSensorForConsumeAssignment_3() { return cSensorForConsumeAssignment_3; }

		//[EntityName]
		public CrossReference getSensorForConsumeEntityNameCrossReference_3_0() { return cSensorForConsumeEntityNameCrossReference_3_0; }

		//ID
		public RuleCall getSensorForConsumeEntityNameIDTerminalRuleCall_3_0_1() { return cSensorForConsumeEntityNameIDTerminalRuleCall_3_0_1; }

		//";"
		public Keyword getSemicolonKeyword_4() { return cSemicolonKeyword_4; }
	}

	public class ConsumeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Consume");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cConsumeKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cNameSourceNameCrossReference_1_0 = (CrossReference)cNameAssignment_1.eContents().get(0);
		private final RuleCall cNameSourceNameIDTerminalRuleCall_1_0_1 = (RuleCall)cNameSourceNameCrossReference_1_0.eContents().get(1);
		private final Keyword cFromKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cFromNameAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final CrossReference cFromNameEntityNameCrossReference_3_0 = (CrossReference)cFromNameAssignment_3.eContents().get(0);
		private final RuleCall cFromNameEntityNameIDTerminalRuleCall_3_0_1 = (RuleCall)cFromNameEntityNameCrossReference_3_0.eContents().get(1);
		private final Keyword cSemicolonKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//Consume:
		//	"consume" name=[SourceName] "from" fromName=[EntityName] ";";
		@Override public ParserRule getRule() { return rule; }

		//"consume" name=[SourceName] "from" fromName=[EntityName] ";"
		public Group getGroup() { return cGroup; }

		//"consume"
		public Keyword getConsumeKeyword_0() { return cConsumeKeyword_0; }

		//name=[SourceName]
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//[SourceName]
		public CrossReference getNameSourceNameCrossReference_1_0() { return cNameSourceNameCrossReference_1_0; }

		//ID
		public RuleCall getNameSourceNameIDTerminalRuleCall_1_0_1() { return cNameSourceNameIDTerminalRuleCall_1_0_1; }

		//"from"
		public Keyword getFromKeyword_2() { return cFromKeyword_2; }

		//fromName=[EntityName]
		public Assignment getFromNameAssignment_3() { return cFromNameAssignment_3; }

		//[EntityName]
		public CrossReference getFromNameEntityNameCrossReference_3_0() { return cFromNameEntityNameCrossReference_3_0; }

		//ID
		public RuleCall getFromNameEntityNameIDTerminalRuleCall_3_0_1() { return cFromNameEntityNameIDTerminalRuleCall_3_0_1; }

		//";"
		public Keyword getSemicolonKeyword_4() { return cSemicolonKeyword_4; }
	}

	public class CommandElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Command");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cCommandKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cCommandNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cCommandNameActionNameCrossReference_1_0 = (CrossReference)cCommandNameAssignment_1.eContents().get(0);
		private final RuleCall cCommandNameActionNameIDTerminalRuleCall_1_0_1 = (RuleCall)cCommandNameActionNameCrossReference_1_0.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cCommandparameterAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cCommandparameterCommandParameterParserRuleCall_3_0 = (RuleCall)cCommandparameterAssignment_3.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Keyword cToKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cActuatorForCommandAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final CrossReference cActuatorForCommandEntityNameCrossReference_6_0 = (CrossReference)cActuatorForCommandAssignment_6.eContents().get(0);
		private final RuleCall cActuatorForCommandEntityNameIDTerminalRuleCall_6_0_1 = (RuleCall)cActuatorForCommandEntityNameCrossReference_6_0.eContents().get(1);
		private final Keyword cSemicolonKeyword_7 = (Keyword)cGroup.eContents().get(7);
		
		//Command:
		//	"command" commandName=[ActionName] "(" commandparameter=CommandParameter? ")" "to" actuatorForCommand=[EntityName]
		//	";";
		@Override public ParserRule getRule() { return rule; }

		//"command" commandName=[ActionName] "(" commandparameter=CommandParameter? ")" "to" actuatorForCommand=[EntityName] ";"
		public Group getGroup() { return cGroup; }

		//"command"
		public Keyword getCommandKeyword_0() { return cCommandKeyword_0; }

		//commandName=[ActionName]
		public Assignment getCommandNameAssignment_1() { return cCommandNameAssignment_1; }

		//[ActionName]
		public CrossReference getCommandNameActionNameCrossReference_1_0() { return cCommandNameActionNameCrossReference_1_0; }

		//ID
		public RuleCall getCommandNameActionNameIDTerminalRuleCall_1_0_1() { return cCommandNameActionNameIDTerminalRuleCall_1_0_1; }

		//"("
		public Keyword getLeftParenthesisKeyword_2() { return cLeftParenthesisKeyword_2; }

		//commandparameter=CommandParameter?
		public Assignment getCommandparameterAssignment_3() { return cCommandparameterAssignment_3; }

		//CommandParameter
		public RuleCall getCommandparameterCommandParameterParserRuleCall_3_0() { return cCommandparameterCommandParameterParserRuleCall_3_0; }

		//")"
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }

		//"to"
		public Keyword getToKeyword_5() { return cToKeyword_5; }

		//actuatorForCommand=[EntityName]
		public Assignment getActuatorForCommandAssignment_6() { return cActuatorForCommandAssignment_6; }

		//[EntityName]
		public CrossReference getActuatorForCommandEntityNameCrossReference_6_0() { return cActuatorForCommandEntityNameCrossReference_6_0; }

		//ID
		public RuleCall getActuatorForCommandEntityNameIDTerminalRuleCall_6_0_1() { return cActuatorForCommandEntityNameIDTerminalRuleCall_6_0_1; }

		//";"
		public Keyword getSemicolonKeyword_7() { return cSemicolonKeyword_7; }
	}

	public class CommandParameterElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "CommandParameter");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cNameParameterNameCrossReference_0_0 = (CrossReference)cNameAssignment_0.eContents().get(0);
		private final RuleCall cNameParameterNameIDTerminalRuleCall_0_0_1 = (RuleCall)cNameParameterNameCrossReference_0_0.eContents().get(1);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cCommaKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cParameterAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cParameterCommandParameterParserRuleCall_1_1_0 = (RuleCall)cParameterAssignment_1_1.eContents().get(0);
		
		//CommandParameter:
		//	name=[ParameterName] ("," parameter=CommandParameter)?;
		@Override public ParserRule getRule() { return rule; }

		//name=[ParameterName] ("," parameter=CommandParameter)?
		public Group getGroup() { return cGroup; }

		//name=[ParameterName]
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }

		//[ParameterName]
		public CrossReference getNameParameterNameCrossReference_0_0() { return cNameParameterNameCrossReference_0_0; }

		//ID
		public RuleCall getNameParameterNameIDTerminalRuleCall_0_0_1() { return cNameParameterNameIDTerminalRuleCall_0_0_1; }

		//("," parameter=CommandParameter)?
		public Group getGroup_1() { return cGroup_1; }

		//","
		public Keyword getCommaKeyword_1_0() { return cCommaKeyword_1_0; }

		//parameter=CommandParameter
		public Assignment getParameterAssignment_1_1() { return cParameterAssignment_1_1; }

		//CommandParameter
		public RuleCall getParameterCommandParameterParserRuleCall_1_1_0() { return cParameterCommandParameterParserRuleCall_1_1_0; }
	}

	public class VocSpecElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "VocSpec");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cStructsKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cStructsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cStructsStructParserRuleCall_2_0 = (RuleCall)cStructsAssignment_2.eContents().get(0);
		private final Keyword cResourcesKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Keyword cColonKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Keyword cSensorsKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Keyword cColonKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Keyword cPeriodicSensorsKeyword_7 = (Keyword)cGroup.eContents().get(7);
		private final Keyword cColonKeyword_8 = (Keyword)cGroup.eContents().get(8);
		private final Assignment cPeriodicSensorsAssignment_9 = (Assignment)cGroup.eContents().get(9);
		private final RuleCall cPeriodicSensorsPeriodicSensorsParserRuleCall_9_0 = (RuleCall)cPeriodicSensorsAssignment_9.eContents().get(0);
		private final Keyword cEventDrivenSensorsKeyword_10 = (Keyword)cGroup.eContents().get(10);
		private final Keyword cColonKeyword_11 = (Keyword)cGroup.eContents().get(11);
		private final Assignment cEventSensorsAssignment_12 = (Assignment)cGroup.eContents().get(12);
		private final RuleCall cEventSensorsEventSensorsParserRuleCall_12_0 = (RuleCall)cEventSensorsAssignment_12.eContents().get(0);
		private final Keyword cActuatorsKeyword_13 = (Keyword)cGroup.eContents().get(13);
		private final Keyword cColonKeyword_14 = (Keyword)cGroup.eContents().get(14);
		private final Assignment cActuatorsAssignment_15 = (Assignment)cGroup.eContents().get(15);
		private final RuleCall cActuatorsActuatorParserRuleCall_15_0 = (RuleCall)cActuatorsAssignment_15.eContents().get(0);
		private final Keyword cStoragesKeyword_16 = (Keyword)cGroup.eContents().get(16);
		private final Keyword cColonKeyword_17 = (Keyword)cGroup.eContents().get(17);
		private final Assignment cStorageServiceAssignment_18 = (Assignment)cGroup.eContents().get(18);
		private final RuleCall cStorageServiceStorageServiceParserRuleCall_18_0 = (RuleCall)cStorageServiceAssignment_18.eContents().get(0);
		
		//VocSpec:
		//	"structs" ":" structs+=Struct+ "resources" ":" "sensors" ":" "periodicSensors" ":" periodicSensors+=PeriodicSensors*
		//	"eventDrivenSensors" ":" eventSensors+=EventSensors* "actuators" ":" actuators+=Actuator* "storages" ":"
		//	storageService+=StorageService*;
		@Override public ParserRule getRule() { return rule; }

		//"structs" ":" structs+=Struct+ "resources" ":" "sensors" ":" "periodicSensors" ":" periodicSensors+=PeriodicSensors*
		//"eventDrivenSensors" ":" eventSensors+=EventSensors* "actuators" ":" actuators+=Actuator* "storages" ":"
		//storageService+=StorageService*
		public Group getGroup() { return cGroup; }

		//"structs"
		public Keyword getStructsKeyword_0() { return cStructsKeyword_0; }

		//":"
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }

		//structs+=Struct+
		public Assignment getStructsAssignment_2() { return cStructsAssignment_2; }

		//Struct
		public RuleCall getStructsStructParserRuleCall_2_0() { return cStructsStructParserRuleCall_2_0; }

		//"resources"
		public Keyword getResourcesKeyword_3() { return cResourcesKeyword_3; }

		//":"
		public Keyword getColonKeyword_4() { return cColonKeyword_4; }

		//"sensors"
		public Keyword getSensorsKeyword_5() { return cSensorsKeyword_5; }

		//":"
		public Keyword getColonKeyword_6() { return cColonKeyword_6; }

		//"periodicSensors"
		public Keyword getPeriodicSensorsKeyword_7() { return cPeriodicSensorsKeyword_7; }

		//":"
		public Keyword getColonKeyword_8() { return cColonKeyword_8; }

		//periodicSensors+=PeriodicSensors*
		public Assignment getPeriodicSensorsAssignment_9() { return cPeriodicSensorsAssignment_9; }

		//PeriodicSensors
		public RuleCall getPeriodicSensorsPeriodicSensorsParserRuleCall_9_0() { return cPeriodicSensorsPeriodicSensorsParserRuleCall_9_0; }

		//"eventDrivenSensors"
		public Keyword getEventDrivenSensorsKeyword_10() { return cEventDrivenSensorsKeyword_10; }

		//":"
		public Keyword getColonKeyword_11() { return cColonKeyword_11; }

		//eventSensors+=EventSensors*
		public Assignment getEventSensorsAssignment_12() { return cEventSensorsAssignment_12; }

		//EventSensors
		public RuleCall getEventSensorsEventSensorsParserRuleCall_12_0() { return cEventSensorsEventSensorsParserRuleCall_12_0; }

		//"actuators"
		public Keyword getActuatorsKeyword_13() { return cActuatorsKeyword_13; }

		//":"
		public Keyword getColonKeyword_14() { return cColonKeyword_14; }

		//actuators+=Actuator*
		public Assignment getActuatorsAssignment_15() { return cActuatorsAssignment_15; }

		//Actuator
		public RuleCall getActuatorsActuatorParserRuleCall_15_0() { return cActuatorsActuatorParserRuleCall_15_0; }

		//"storages"
		public Keyword getStoragesKeyword_16() { return cStoragesKeyword_16; }

		//":"
		public Keyword getColonKeyword_17() { return cColonKeyword_17; }

		//storageService+=StorageService*
		public Assignment getStorageServiceAssignment_18() { return cStorageServiceAssignment_18; }

		//StorageService
		public RuleCall getStorageServiceStorageServiceParserRuleCall_18_0() { return cStorageServiceStorageServiceParserRuleCall_18_0; }
	}

	public class RegionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Region");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cRegionLabelAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cRegionLabelRegionLabelParserRuleCall_0_0 = (RuleCall)cRegionLabelAssignment_0.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cRegionTypeAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cRegionTypeTypeParserRuleCall_2_0 = (RuleCall)cRegionTypeAssignment_2.eContents().get(0);
		private final Keyword cSemicolonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//Region:
		//	regionLabel=RegionLabel ":" regionType=Type ";";
		@Override public ParserRule getRule() { return rule; }

		//regionLabel=RegionLabel ":" regionType=Type ";"
		public Group getGroup() { return cGroup; }

		//regionLabel=RegionLabel
		public Assignment getRegionLabelAssignment_0() { return cRegionLabelAssignment_0; }

		//RegionLabel
		public RuleCall getRegionLabelRegionLabelParserRuleCall_0_0() { return cRegionLabelRegionLabelParserRuleCall_0_0; }

		//":"
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }

		//regionType=Type
		public Assignment getRegionTypeAssignment_2() { return cRegionTypeAssignment_2; }

		//Type
		public RuleCall getRegionTypeTypeParserRuleCall_2_0() { return cRegionTypeTypeParserRuleCall_2_0; }

		//";"
		public Keyword getSemicolonKeyword_3() { return cSemicolonKeyword_3; }
	}

	public class RegionLabelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "RegionLabel");
		private final Assignment cNameAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_0 = (RuleCall)cNameAssignment.eContents().get(0);
		
		//RegionLabel:
		//	name=ID;
		@Override public ParserRule getRule() { return rule; }

		//name=ID
		public Assignment getNameAssignment() { return cNameAssignment; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_0() { return cNameIDTerminalRuleCall_0; }
	}

	public class StructElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Struct");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Assignment cFieldsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cFieldsFieldParserRuleCall_1_0 = (RuleCall)cFieldsAssignment_1.eContents().get(0);
		
		//Struct:
		//	name=ID fields+=Field+;
		@Override public ParserRule getRule() { return rule; }

		//name=ID fields+=Field+
		public Group getGroup() { return cGroup; }

		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }

		//fields+=Field+
		public Assignment getFieldsAssignment_1() { return cFieldsAssignment_1; }

		//Field
		public RuleCall getFieldsFieldParserRuleCall_1_0() { return cFieldsFieldParserRuleCall_1_0; }
	}

	public class FieldElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Field");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cTypeAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cTypeTypeParserRuleCall_2_0 = (RuleCall)cTypeAssignment_2.eContents().get(0);
		private final Keyword cSemicolonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//Field:
		//	name=ID ":" type+=Type ";";
		@Override public ParserRule getRule() { return rule; }

		//name=ID ":" type+=Type ";"
		public Group getGroup() { return cGroup; }

		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }

		//":"
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }

		//type+=Type
		public Assignment getTypeAssignment_2() { return cTypeAssignment_2; }

		//Type
		public RuleCall getTypeTypeParserRuleCall_2_0() { return cTypeTypeParserRuleCall_2_0; }

		//";"
		public Keyword getSemicolonKeyword_3() { return cSemicolonKeyword_3; }
	}

	public class PeriodicSensorsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "PeriodicSensors");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cSensorNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cSensorNameEntityNameParserRuleCall_0_0 = (RuleCall)cSensorNameAssignment_0.eContents().get(0);
		private final Assignment cGenerateInfoAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cGenerateInfoGenerateParserRuleCall_1_0 = (RuleCall)cGenerateInfoAssignment_1.eContents().get(0);
		private final Keyword cSampleKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cPeriodKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final RuleCall cINTTerminalRuleCall_4 = (RuleCall)cGroup.eContents().get(4);
		private final Keyword cForKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final RuleCall cINTTerminalRuleCall_6 = (RuleCall)cGroup.eContents().get(6);
		private final Keyword cSemicolonKeyword_7 = (Keyword)cGroup.eContents().get(7);
		
		/// * Periodic Sensor Definition * / PeriodicSensors:
		//	sensorName=EntityName generateInfo+=Generate+ "sample" "period" INT "for" INT ";";
		@Override public ParserRule getRule() { return rule; }

		//sensorName=EntityName generateInfo+=Generate+ "sample" "period" INT "for" INT ";"
		public Group getGroup() { return cGroup; }

		//sensorName=EntityName
		public Assignment getSensorNameAssignment_0() { return cSensorNameAssignment_0; }

		//EntityName
		public RuleCall getSensorNameEntityNameParserRuleCall_0_0() { return cSensorNameEntityNameParserRuleCall_0_0; }

		//generateInfo+=Generate+
		public Assignment getGenerateInfoAssignment_1() { return cGenerateInfoAssignment_1; }

		//Generate
		public RuleCall getGenerateInfoGenerateParserRuleCall_1_0() { return cGenerateInfoGenerateParserRuleCall_1_0; }

		//"sample"
		public Keyword getSampleKeyword_2() { return cSampleKeyword_2; }

		//"period"
		public Keyword getPeriodKeyword_3() { return cPeriodKeyword_3; }

		//INT
		public RuleCall getINTTerminalRuleCall_4() { return cINTTerminalRuleCall_4; }

		//"for"
		public Keyword getForKeyword_5() { return cForKeyword_5; }

		//INT
		public RuleCall getINTTerminalRuleCall_6() { return cINTTerminalRuleCall_6; }

		//";"
		public Keyword getSemicolonKeyword_7() { return cSemicolonKeyword_7; }
	}

	public class EventSensorsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "EventSensors");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cSensorNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cSensorNameEntityNameParserRuleCall_0_0 = (RuleCall)cSensorNameAssignment_0.eContents().get(0);
		private final Assignment cGenerateInfoAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cGenerateInfoGenerateParserRuleCall_1_0 = (RuleCall)cGenerateInfoAssignment_1.eContents().get(0);
		private final Keyword cOnConditionKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cEventConditionsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cEventConditionsEventConditionsParserRuleCall_3_0 = (RuleCall)cEventConditionsAssignment_3.eContents().get(0);
		private final Keyword cSemicolonKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		/// * Event Driven Sensor Definition * / EventSensors:
		//	sensorName=EntityName generateInfo+=Generate+ "onCondition" eventConditions+=EventConditions ";";
		@Override public ParserRule getRule() { return rule; }

		//sensorName=EntityName generateInfo+=Generate+ "onCondition" eventConditions+=EventConditions ";"
		public Group getGroup() { return cGroup; }

		//sensorName=EntityName
		public Assignment getSensorNameAssignment_0() { return cSensorNameAssignment_0; }

		//EntityName
		public RuleCall getSensorNameEntityNameParserRuleCall_0_0() { return cSensorNameEntityNameParserRuleCall_0_0; }

		//generateInfo+=Generate+
		public Assignment getGenerateInfoAssignment_1() { return cGenerateInfoAssignment_1; }

		//Generate
		public RuleCall getGenerateInfoGenerateParserRuleCall_1_0() { return cGenerateInfoGenerateParserRuleCall_1_0; }

		//"onCondition"
		public Keyword getOnConditionKeyword_2() { return cOnConditionKeyword_2; }

		//eventConditions+=EventConditions
		public Assignment getEventConditionsAssignment_3() { return cEventConditionsAssignment_3; }

		//EventConditions
		public RuleCall getEventConditionsEventConditionsParserRuleCall_3_0() { return cEventConditionsEventConditionsParserRuleCall_3_0; }

		//";"
		public Keyword getSemicolonKeyword_4() { return cSemicolonKeyword_4; }
	}

	public class EventConditionsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "EventConditions");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cCommaKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cEventConditionsAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cEventConditionsEventConditionsParserRuleCall_1_1_0 = (RuleCall)cEventConditionsAssignment_1_1.eContents().get(0);
		
		//EventConditions:
		//	name=ID ("," eventConditions+=EventConditions)?;
		@Override public ParserRule getRule() { return rule; }

		//name=ID ("," eventConditions+=EventConditions)?
		public Group getGroup() { return cGroup; }

		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }

		//("," eventConditions+=EventConditions)?
		public Group getGroup_1() { return cGroup_1; }

		//","
		public Keyword getCommaKeyword_1_0() { return cCommaKeyword_1_0; }

		//eventConditions+=EventConditions
		public Assignment getEventConditionsAssignment_1_1() { return cEventConditionsAssignment_1_1; }

		//EventConditions
		public RuleCall getEventConditionsEventConditionsParserRuleCall_1_1_0() { return cEventConditionsEventConditionsParserRuleCall_1_1_0; }
	}

	public class InBuiltComputationalServiceNameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "InBuiltComputationalServiceName");
		private final Assignment cNameAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_0 = (RuleCall)cNameAssignment.eContents().get(0);
		
		//InBuiltComputationalServiceName:
		//	name=ID;
		@Override public ParserRule getRule() { return rule; }

		//name=ID
		public Assignment getNameAssignment() { return cNameAssignment; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_0() { return cNameIDTerminalRuleCall_0; }
	}

	public class EntityNameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "EntityName");
		private final Assignment cNameAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_0 = (RuleCall)cNameAssignment.eContents().get(0);
		
		//EntityName:
		//	name=ID;
		@Override public ParserRule getRule() { return rule; }

		//name=ID
		public Assignment getNameAssignment() { return cNameAssignment; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_0() { return cNameIDTerminalRuleCall_0; }
	}

	public class GenerateElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Generate");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cGenerateKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cSourceNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cSourceNameSourceNameParserRuleCall_1_0 = (RuleCall)cSourceNameAssignment_1.eContents().get(0);
		private final Keyword cColonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cTypeAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cTypeTypeParserRuleCall_3_0 = (RuleCall)cTypeAssignment_3.eContents().get(0);
		private final Keyword cSemicolonKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//Generate:
		//	"generate" sourceName=SourceName ":" type=Type ";";
		@Override public ParserRule getRule() { return rule; }

		//"generate" sourceName=SourceName ":" type=Type ";"
		public Group getGroup() { return cGroup; }

		//"generate"
		public Keyword getGenerateKeyword_0() { return cGenerateKeyword_0; }

		//sourceName=SourceName
		public Assignment getSourceNameAssignment_1() { return cSourceNameAssignment_1; }

		//SourceName
		public RuleCall getSourceNameSourceNameParserRuleCall_1_0() { return cSourceNameSourceNameParserRuleCall_1_0; }

		//":"
		public Keyword getColonKeyword_2() { return cColonKeyword_2; }

		//type=Type
		public Assignment getTypeAssignment_3() { return cTypeAssignment_3; }

		//Type
		public RuleCall getTypeTypeParserRuleCall_3_0() { return cTypeTypeParserRuleCall_3_0; }

		//";"
		public Keyword getSemicolonKeyword_4() { return cSemicolonKeyword_4; }
	}

	public class SourceNameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "SourceName");
		private final Assignment cNameAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_0 = (RuleCall)cNameAssignment.eContents().get(0);
		
		//SourceName:
		//	name=ID;
		@Override public ParserRule getRule() { return rule; }

		//name=ID
		public Assignment getNameAssignment() { return cNameAssignment; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_0() { return cNameIDTerminalRuleCall_0; }
	}

	public class ActuatorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Actuator");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cActuatorNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cActuatorNameEntityNameParserRuleCall_0_0 = (RuleCall)cActuatorNameAssignment_0.eContents().get(0);
		private final Assignment cActionsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cActionsActionParserRuleCall_1_0 = (RuleCall)cActionsAssignment_1.eContents().get(0);
		
		/// * Actuator Definition * / Actuator:
		//	actuatorName=EntityName actions+=Action*;
		@Override public ParserRule getRule() { return rule; }

		//actuatorName=EntityName actions+=Action*
		public Group getGroup() { return cGroup; }

		//actuatorName=EntityName
		public Assignment getActuatorNameAssignment_0() { return cActuatorNameAssignment_0; }

		//EntityName
		public RuleCall getActuatorNameEntityNameParserRuleCall_0_0() { return cActuatorNameEntityNameParserRuleCall_0_0; }

		//actions+=Action*
		public Assignment getActionsAssignment_1() { return cActionsAssignment_1; }

		//Action
		public RuleCall getActionsActionParserRuleCall_1_0() { return cActionsActionParserRuleCall_1_0; }
	}

	public class ActionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Action");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cActionKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cActionNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cActionNameActionNameParserRuleCall_1_0 = (RuleCall)cActionNameAssignment_1.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cParametersAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cParametersParametersParserRuleCall_3_0 = (RuleCall)cParametersAssignment_3.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Keyword cSemicolonKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//Action:
		//	"action" actionName=ActionName "(" parameters+=Parameters* ")" ";";
		@Override public ParserRule getRule() { return rule; }

		//"action" actionName=ActionName "(" parameters+=Parameters* ")" ";"
		public Group getGroup() { return cGroup; }

		//"action"
		public Keyword getActionKeyword_0() { return cActionKeyword_0; }

		//actionName=ActionName
		public Assignment getActionNameAssignment_1() { return cActionNameAssignment_1; }

		//ActionName
		public RuleCall getActionNameActionNameParserRuleCall_1_0() { return cActionNameActionNameParserRuleCall_1_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_2() { return cLeftParenthesisKeyword_2; }

		//parameters+=Parameters*
		public Assignment getParametersAssignment_3() { return cParametersAssignment_3; }

		//Parameters
		public RuleCall getParametersParametersParserRuleCall_3_0() { return cParametersParametersParserRuleCall_3_0; }

		//")"
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }

		//";"
		public Keyword getSemicolonKeyword_5() { return cSemicolonKeyword_5; }
	}

	public class ActionNameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ActionName");
		private final Assignment cNameAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_0 = (RuleCall)cNameAssignment.eContents().get(0);
		
		//ActionName:
		//	name=ID;
		@Override public ParserRule getRule() { return rule; }

		//name=ID
		public Assignment getNameAssignment() { return cNameAssignment; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_0() { return cNameIDTerminalRuleCall_0; }
	}

	public class ParametersElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Parameters");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cParameterNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cParameterNameParameterNameParserRuleCall_0_0 = (RuleCall)cParameterNameAssignment_0.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cTypeAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cTypeTypeParserRuleCall_2_0 = (RuleCall)cTypeAssignment_2.eContents().get(0);
		
		//Parameters:
		//	parameterName=ParameterName ":" type=Type;
		@Override public ParserRule getRule() { return rule; }

		//parameterName=ParameterName ":" type=Type
		public Group getGroup() { return cGroup; }

		//parameterName=ParameterName
		public Assignment getParameterNameAssignment_0() { return cParameterNameAssignment_0; }

		//ParameterName
		public RuleCall getParameterNameParameterNameParserRuleCall_0_0() { return cParameterNameParameterNameParserRuleCall_0_0; }

		//":"
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }

		//type=Type
		public Assignment getTypeAssignment_2() { return cTypeAssignment_2; }

		//Type
		public RuleCall getTypeTypeParserRuleCall_2_0() { return cTypeTypeParserRuleCall_2_0; }
	}

	public class ParameterNameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ParameterName");
		private final Assignment cNameAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_0 = (RuleCall)cNameAssignment.eContents().get(0);
		
		//ParameterName:
		//	name=ID;
		@Override public ParserRule getRule() { return rule; }

		//name=ID
		public Assignment getNameAssignment() { return cNameAssignment; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_0() { return cNameIDTerminalRuleCall_0; }
	}

	public class StorageServiceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "StorageService");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cStorageServiceNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cStorageServiceNameEntityNameParserRuleCall_0_0 = (RuleCall)cStorageServiceNameAssignment_0.eContents().get(0);
		private final Assignment cDataAccessesAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cDataAccessesDataAccessParserRuleCall_1_0 = (RuleCall)cDataAccessesAssignment_1.eContents().get(0);
		
		/// *  Storage Service Definition  * / StorageService:
		//	storageServiceName=EntityName dataAccesses+=DataAccess*;
		@Override public ParserRule getRule() { return rule; }

		//storageServiceName=EntityName dataAccesses+=DataAccess*
		public Group getGroup() { return cGroup; }

		//storageServiceName=EntityName
		public Assignment getStorageServiceNameAssignment_0() { return cStorageServiceNameAssignment_0; }

		//EntityName
		public RuleCall getStorageServiceNameEntityNameParserRuleCall_0_0() { return cStorageServiceNameEntityNameParserRuleCall_0_0; }

		//dataAccesses+=DataAccess*
		public Assignment getDataAccessesAssignment_1() { return cDataAccessesAssignment_1; }

		//DataAccess
		public RuleCall getDataAccessesDataAccessParserRuleCall_1_0() { return cDataAccessesDataAccessParserRuleCall_1_0; }
	}

	public class DataAccessElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "DataAccess");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cGenerateKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cSourceNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cSourceNameSourceNameParserRuleCall_1_0 = (RuleCall)cSourceNameAssignment_1.eContents().get(0);
		private final Keyword cColonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cDataAccessTypeAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cDataAccessTypeTypeParserRuleCall_3_0 = (RuleCall)cDataAccessTypeAssignment_3.eContents().get(0);
		private final Keyword cAccessedByKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cDataItemAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cDataItemIDTerminalRuleCall_5_0 = (RuleCall)cDataItemAssignment_5.eContents().get(0);
		private final Keyword cColonKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Assignment cTypeAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cTypeTypeParserRuleCall_7_0 = (RuleCall)cTypeAssignment_7.eContents().get(0);
		private final Keyword cSemicolonKeyword_8 = (Keyword)cGroup.eContents().get(8);
		private final Assignment cActionsAssignment_9 = (Assignment)cGroup.eContents().get(9);
		private final RuleCall cActionsActionParserRuleCall_9_0 = (RuleCall)cActionsAssignment_9.eContents().get(0);
		
		//DataAccess:
		//	"generate" sourceName=SourceName ":" dataAccessType=Type "accessed-by" dataItem=ID ":" type=Type ";"
		//	actions+=Action*;
		@Override public ParserRule getRule() { return rule; }

		//"generate" sourceName=SourceName ":" dataAccessType=Type "accessed-by" dataItem=ID ":" type=Type ";" actions+=Action*
		public Group getGroup() { return cGroup; }

		//"generate"
		public Keyword getGenerateKeyword_0() { return cGenerateKeyword_0; }

		//sourceName=SourceName
		public Assignment getSourceNameAssignment_1() { return cSourceNameAssignment_1; }

		//SourceName
		public RuleCall getSourceNameSourceNameParserRuleCall_1_0() { return cSourceNameSourceNameParserRuleCall_1_0; }

		//":"
		public Keyword getColonKeyword_2() { return cColonKeyword_2; }

		//dataAccessType=Type
		public Assignment getDataAccessTypeAssignment_3() { return cDataAccessTypeAssignment_3; }

		//Type
		public RuleCall getDataAccessTypeTypeParserRuleCall_3_0() { return cDataAccessTypeTypeParserRuleCall_3_0; }

		//"accessed-by"
		public Keyword getAccessedByKeyword_4() { return cAccessedByKeyword_4; }

		//dataItem=ID
		public Assignment getDataItemAssignment_5() { return cDataItemAssignment_5; }

		//ID
		public RuleCall getDataItemIDTerminalRuleCall_5_0() { return cDataItemIDTerminalRuleCall_5_0; }

		//":"
		public Keyword getColonKeyword_6() { return cColonKeyword_6; }

		//type=Type
		public Assignment getTypeAssignment_7() { return cTypeAssignment_7; }

		//Type
		public RuleCall getTypeTypeParserRuleCall_7_0() { return cTypeTypeParserRuleCall_7_0; }

		//";"
		public Keyword getSemicolonKeyword_8() { return cSemicolonKeyword_8; }

		//actions+=Action*
		public Assignment getActionsAssignment_9() { return cActionsAssignment_9; }

		//Action
		public RuleCall getActionsActionParserRuleCall_9_0() { return cActionsActionParserRuleCall_9_0; }
	}

	public class TypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Type");
		private final Assignment cPrimitiveDataTypeAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cPrimitiveDataTypePrimitiveDataTypeParserRuleCall_0 = (RuleCall)cPrimitiveDataTypeAssignment.eContents().get(0);
		
		/// * Type Definition * / Type:
		//	primitiveDataType=PrimitiveDataType;
		@Override public ParserRule getRule() { return rule; }

		//primitiveDataType=PrimitiveDataType
		public Assignment getPrimitiveDataTypeAssignment() { return cPrimitiveDataTypeAssignment; }

		//PrimitiveDataType
		public RuleCall getPrimitiveDataTypePrimitiveDataTypeParserRuleCall_0() { return cPrimitiveDataTypePrimitiveDataTypeParserRuleCall_0; }
	}

	public class OperationNameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "OperationName");
		private final Assignment cOPERATION_NAMEAssignment = (Assignment)rule.eContents().get(1);
		private final Keyword cOPERATION_NAMEAVG_BY_SAMPLEKeyword_0 = (Keyword)cOPERATION_NAMEAssignment.eContents().get(0);
		
		//OperationName:
		//	OPERATION_NAME="AVG_BY_SAMPLE";
		@Override public ParserRule getRule() { return rule; }

		//OPERATION_NAME="AVG_BY_SAMPLE"
		public Assignment getOPERATION_NAMEAssignment() { return cOPERATION_NAMEAssignment; }

		//"AVG_BY_SAMPLE"
		public Keyword getOPERATION_NAMEAVG_BY_SAMPLEKeyword_0() { return cOPERATION_NAMEAVG_BY_SAMPLEKeyword_0; }
	}

	public class PrimitiveDataTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "PrimitiveDataType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cINTEGERAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final Keyword cINTEGERIntegerKeyword_0_0 = (Keyword)cINTEGERAssignment_0.eContents().get(0);
		private final Assignment cBOOLEANAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final Keyword cBOOLEANBooleanKeyword_1_0 = (Keyword)cBOOLEANAssignment_1.eContents().get(0);
		private final Assignment cSTRINGAssignment_2 = (Assignment)cAlternatives.eContents().get(2);
		private final Keyword cSTRINGStringKeyword_2_0 = (Keyword)cSTRINGAssignment_2.eContents().get(0);
		private final Assignment cLONGAssignment_3 = (Assignment)cAlternatives.eContents().get(3);
		private final Keyword cLONGLongKeyword_3_0 = (Keyword)cLONGAssignment_3.eContents().get(0);
		private final Assignment cDOUBLEAssignment_4 = (Assignment)cAlternatives.eContents().get(4);
		private final Keyword cDOUBLEDoubleKeyword_4_0 = (Keyword)cDOUBLEAssignment_4.eContents().get(0);
		private final Assignment cStructDefAssignment_5 = (Assignment)cAlternatives.eContents().get(5);
		private final CrossReference cStructDefStructCrossReference_5_0 = (CrossReference)cStructDefAssignment_5.eContents().get(0);
		private final RuleCall cStructDefStructIDTerminalRuleCall_5_0_1 = (RuleCall)cStructDefStructCrossReference_5_0.eContents().get(1);
		
		//PrimitiveDataType:
		//	INTEGER="Integer" | BOOLEAN="boolean" | STRING="String" | LONG="long" | DOUBLE="double" | structDef=[Struct];
		@Override public ParserRule getRule() { return rule; }

		//INTEGER="Integer" | BOOLEAN="boolean" | STRING="String" | LONG="long" | DOUBLE="double" | structDef=[Struct]
		public Alternatives getAlternatives() { return cAlternatives; }

		//INTEGER="Integer"
		public Assignment getINTEGERAssignment_0() { return cINTEGERAssignment_0; }

		//"Integer"
		public Keyword getINTEGERIntegerKeyword_0_0() { return cINTEGERIntegerKeyword_0_0; }

		//BOOLEAN="boolean"
		public Assignment getBOOLEANAssignment_1() { return cBOOLEANAssignment_1; }

		//"boolean"
		public Keyword getBOOLEANBooleanKeyword_1_0() { return cBOOLEANBooleanKeyword_1_0; }

		//STRING="String"
		public Assignment getSTRINGAssignment_2() { return cSTRINGAssignment_2; }

		//"String"
		public Keyword getSTRINGStringKeyword_2_0() { return cSTRINGStringKeyword_2_0; }

		//LONG="long"
		public Assignment getLONGAssignment_3() { return cLONGAssignment_3; }

		//"long"
		public Keyword getLONGLongKeyword_3_0() { return cLONGLongKeyword_3_0; }

		//DOUBLE="double"
		public Assignment getDOUBLEAssignment_4() { return cDOUBLEAssignment_4; }

		//"double"
		public Keyword getDOUBLEDoubleKeyword_4_0() { return cDOUBLEDoubleKeyword_4_0; }

		//structDef=[Struct]
		public Assignment getStructDefAssignment_5() { return cStructDefAssignment_5; }

		//[Struct]
		public CrossReference getStructDefStructCrossReference_5_0() { return cStructDefStructCrossReference_5_0; }

		//ID
		public RuleCall getStructDefStructIDTerminalRuleCall_5_0_1() { return cStructDefStructIDTerminalRuleCall_5_0_1; }
	}
	
	
	private final SpecElements pSpec;
	private final DeploymentSpecElements pDeploymentSpec;
	private final DeviceElements pDevice;
	private final DeviceDescriptionElements pDeviceDescription;
	private final DeviceLocationElements pDeviceLocation;
	private final PlatformTypeElements pPlatformType;
	private final DatabaseNameElements pDatabaseName;
	private final DeviceProtocolElements pDeviceProtocol;
	private final DeviceAbilitiesElements pDeviceAbilities;
	private final InteractionSpecElements pInteractionSpec;
	private final InteractionActionElements pInteractionAction;
	private final ArchSpecElements pArchSpec;
	private final InBuiltComputationalServiceElements pInBuiltComputationalService;
	private final CustomComputationalServiceElements pCustomComputationalService;
	private final RequestElements pRequest;
	private final ConsumeForInBuiltElements pConsumeForInBuilt;
	private final ConsumeElements pConsume;
	private final CommandElements pCommand;
	private final CommandParameterElements pCommandParameter;
	private final VocSpecElements pVocSpec;
	private final RegionElements pRegion;
	private final RegionLabelElements pRegionLabel;
	private final StructElements pStruct;
	private final FieldElements pField;
	private final PeriodicSensorsElements pPeriodicSensors;
	private final EventSensorsElements pEventSensors;
	private final EventConditionsElements pEventConditions;
	private final InBuiltComputationalServiceNameElements pInBuiltComputationalServiceName;
	private final EntityNameElements pEntityName;
	private final GenerateElements pGenerate;
	private final SourceNameElements pSourceName;
	private final ActuatorElements pActuator;
	private final ActionElements pAction;
	private final ActionNameElements pActionName;
	private final ParametersElements pParameters;
	private final ParameterNameElements pParameterName;
	private final StorageServiceElements pStorageService;
	private final DataAccessElements pDataAccess;
	private final TypeElements pType;
	private final OperationNameElements pOperationName;
	private final PrimitiveDataTypeElements pPrimitiveDataType;
	
	private final Grammar grammar;

	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public MyDslGrammarAccess(GrammarProvider grammarProvider,
		TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pSpec = new SpecElements();
		this.pDeploymentSpec = new DeploymentSpecElements();
		this.pDevice = new DeviceElements();
		this.pDeviceDescription = new DeviceDescriptionElements();
		this.pDeviceLocation = new DeviceLocationElements();
		this.pPlatformType = new PlatformTypeElements();
		this.pDatabaseName = new DatabaseNameElements();
		this.pDeviceProtocol = new DeviceProtocolElements();
		this.pDeviceAbilities = new DeviceAbilitiesElements();
		this.pInteractionSpec = new InteractionSpecElements();
		this.pInteractionAction = new InteractionActionElements();
		this.pArchSpec = new ArchSpecElements();
		this.pInBuiltComputationalService = new InBuiltComputationalServiceElements();
		this.pCustomComputationalService = new CustomComputationalServiceElements();
		this.pRequest = new RequestElements();
		this.pConsumeForInBuilt = new ConsumeForInBuiltElements();
		this.pConsume = new ConsumeElements();
		this.pCommand = new CommandElements();
		this.pCommandParameter = new CommandParameterElements();
		this.pVocSpec = new VocSpecElements();
		this.pRegion = new RegionElements();
		this.pRegionLabel = new RegionLabelElements();
		this.pStruct = new StructElements();
		this.pField = new FieldElements();
		this.pPeriodicSensors = new PeriodicSensorsElements();
		this.pEventSensors = new EventSensorsElements();
		this.pEventConditions = new EventConditionsElements();
		this.pInBuiltComputationalServiceName = new InBuiltComputationalServiceNameElements();
		this.pEntityName = new EntityNameElements();
		this.pGenerate = new GenerateElements();
		this.pSourceName = new SourceNameElements();
		this.pActuator = new ActuatorElements();
		this.pAction = new ActionElements();
		this.pActionName = new ActionNameElements();
		this.pParameters = new ParametersElements();
		this.pParameterName = new ParameterNameElements();
		this.pStorageService = new StorageServiceElements();
		this.pDataAccess = new DataAccessElements();
		this.pType = new TypeElements();
		this.pOperationName = new OperationNameElements();
		this.pPrimitiveDataType = new PrimitiveDataTypeElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("org.xtext.example.mydsl.MyDsl".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	

	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Spec:
	//	vocSpec=VocSpec | interactionSpec=InteractionSpec | archSpec=ArchSpec | networkSpec=DeploymentSpec;
	public SpecElements getSpecAccess() {
		return pSpec;
	}
	
	public ParserRule getSpecRule() {
		return getSpecAccess().getRule();
	}

	//DeploymentSpec:
	//	"devices" ":" devices+=Device+;
	public DeploymentSpecElements getDeploymentSpecAccess() {
		return pDeploymentSpec;
	}
	
	public ParserRule getDeploymentSpecRule() {
		return getDeploymentSpecAccess().getRule();
	}

	//Device:
	//	deviceName=ID ":" "location" ":" deviceLocation+=DeviceLocation "platform" ":" platformType+=PlatformType ";"
	//	"resources" ":" deviceAbilities+=DeviceAbilities? ";" "protocol" ":" deviceProtocol+=DeviceProtocol ("database" ":"
	//	databaseName+=DatabaseName ";")* "description" ":" deviceDescription+=DeviceDescription ";";
	public DeviceElements getDeviceAccess() {
		return pDevice;
	}
	
	public ParserRule getDeviceRule() {
		return getDeviceAccess().getRule();
	}

	//DeviceDescription:
	//	devicedescriptionText=STRING;
	public DeviceDescriptionElements getDeviceDescriptionAccess() {
		return pDeviceDescription;
	}
	
	public ParserRule getDeviceDescriptionRule() {
		return getDeviceDescriptionAccess().getRule();
	}

	//DeviceLocation:
	//	regionLabel=ID ":" regionValue=INT ";";
	public DeviceLocationElements getDeviceLocationAccess() {
		return pDeviceLocation;
	}
	
	public ParserRule getDeviceLocationRule() {
		return getDeviceLocationAccess().getRule();
	}

	//PlatformType:
	//	deviceType="JavaSE" | deviceType="Android";
	public PlatformTypeElements getPlatformTypeAccess() {
		return pPlatformType;
	}
	
	public ParserRule getPlatformTypeRule() {
		return getPlatformTypeAccess().getRule();
	}

	//DatabaseName:
	//	installedDatabase="MySQL" | installedDatabase="SQLAzure" | installedDatabase="MongoDB";
	public DatabaseNameElements getDatabaseNameAccess() {
		return pDatabaseName;
	}
	
	public ParserRule getDatabaseNameRule() {
		return getDatabaseNameAccess().getRule();
	}

	//DeviceProtocol:
	//	protocolName="mqtt" ";";
	public DeviceProtocolElements getDeviceProtocolAccess() {
		return pDeviceProtocol;
	}
	
	public ParserRule getDeviceProtocolRule() {
		return getDeviceProtocolAccess().getRule();
	}

	//DeviceAbilities:
	//	deviceEntityName=[EntityName] ("," name=DeviceAbilities)?;
	public DeviceAbilitiesElements getDeviceAbilitiesAccess() {
		return pDeviceAbilities;
	}
	
	public ParserRule getDeviceAbilitiesRule() {
		return getDeviceAbilitiesAccess().getRule();
	}

	//InteractionSpec:
	//	"resources" ":" "userInteractions" ":" interactionName=EntityName interactionCommand+=Command*
	//	interactionRequest+=Request* interactionNotify+=InteractionAction*;
	public InteractionSpecElements getInteractionSpecAccess() {
		return pInteractionSpec;
	}
	
	public ParserRule getInteractionSpecRule() {
		return getInteractionSpecAccess().getRule();
	}

	//InteractionAction:
	//	"notify" actionName=ActionName "(" parameters+=Parameters* ")" "from" interactionEntity=[EntityName] ";";
	public InteractionActionElements getInteractionActionAccess() {
		return pInteractionAction;
	}
	
	public ParserRule getInteractionActionRule() {
		return getInteractionActionAccess().getRule();
	}

	//ArchSpec:
	//	("structs" ":" structs+=Struct+)* "softwareComponents" ":" "computationalService" ":" ("InBuilt" ":")*
	//	inbuiltComputationalService+=InBuiltComputationalService* "Custom" ":"
	//	customComputationalService+=customComputationalService+;
	public ArchSpecElements getArchSpecAccess() {
		return pArchSpec;
	}
	
	public ParserRule getArchSpecRule() {
		return getArchSpecAccess().getRule();
	}

	//InBuiltComputationalService:
	//	inBuiltComputationalServiceName=EntityName consumes+=ConsumeForInBuilt+ "COMPUTE" "(" operationName=OperationName
	//	("," operationParameter=INT)? ")" ";" generateInfo+=Generate+;
	public InBuiltComputationalServiceElements getInBuiltComputationalServiceAccess() {
		return pInBuiltComputationalService;
	}
	
	public ParserRule getInBuiltComputationalServiceRule() {
		return getInBuiltComputationalServiceAccess().getRule();
	}

	//customComputationalService:
	//	customComputationalServiceName=EntityName consumes+=Consume+ requests+=Request* generateInfo+=Generate*
	//	commands+=Command*;
	public CustomComputationalServiceElements getCustomComputationalServiceAccess() {
		return pCustomComputationalService;
	}
	
	public ParserRule getCustomComputationalServiceRule() {
		return getCustomComputationalServiceAccess().getRule();
	}

	//Request:
	//	"request" requestname=[SourceName] "to" storageForRequest=[EntityName] ";";
	public RequestElements getRequestAccess() {
		return pRequest;
	}
	
	public ParserRule getRequestRule() {
		return getRequestAccess().getRule();
	}

	//ConsumeForInBuilt:
	//	"consume" name=[SourceName] "from" SensorForConsume=[EntityName] ";";
	public ConsumeForInBuiltElements getConsumeForInBuiltAccess() {
		return pConsumeForInBuilt;
	}
	
	public ParserRule getConsumeForInBuiltRule() {
		return getConsumeForInBuiltAccess().getRule();
	}

	//Consume:
	//	"consume" name=[SourceName] "from" fromName=[EntityName] ";";
	public ConsumeElements getConsumeAccess() {
		return pConsume;
	}
	
	public ParserRule getConsumeRule() {
		return getConsumeAccess().getRule();
	}

	//Command:
	//	"command" commandName=[ActionName] "(" commandparameter=CommandParameter? ")" "to" actuatorForCommand=[EntityName]
	//	";";
	public CommandElements getCommandAccess() {
		return pCommand;
	}
	
	public ParserRule getCommandRule() {
		return getCommandAccess().getRule();
	}

	//CommandParameter:
	//	name=[ParameterName] ("," parameter=CommandParameter)?;
	public CommandParameterElements getCommandParameterAccess() {
		return pCommandParameter;
	}
	
	public ParserRule getCommandParameterRule() {
		return getCommandParameterAccess().getRule();
	}

	//VocSpec:
	//	"structs" ":" structs+=Struct+ "resources" ":" "sensors" ":" "periodicSensors" ":" periodicSensors+=PeriodicSensors*
	//	"eventDrivenSensors" ":" eventSensors+=EventSensors* "actuators" ":" actuators+=Actuator* "storages" ":"
	//	storageService+=StorageService*;
	public VocSpecElements getVocSpecAccess() {
		return pVocSpec;
	}
	
	public ParserRule getVocSpecRule() {
		return getVocSpecAccess().getRule();
	}

	//Region:
	//	regionLabel=RegionLabel ":" regionType=Type ";";
	public RegionElements getRegionAccess() {
		return pRegion;
	}
	
	public ParserRule getRegionRule() {
		return getRegionAccess().getRule();
	}

	//RegionLabel:
	//	name=ID;
	public RegionLabelElements getRegionLabelAccess() {
		return pRegionLabel;
	}
	
	public ParserRule getRegionLabelRule() {
		return getRegionLabelAccess().getRule();
	}

	//Struct:
	//	name=ID fields+=Field+;
	public StructElements getStructAccess() {
		return pStruct;
	}
	
	public ParserRule getStructRule() {
		return getStructAccess().getRule();
	}

	//Field:
	//	name=ID ":" type+=Type ";";
	public FieldElements getFieldAccess() {
		return pField;
	}
	
	public ParserRule getFieldRule() {
		return getFieldAccess().getRule();
	}

	/// * Periodic Sensor Definition * / PeriodicSensors:
	//	sensorName=EntityName generateInfo+=Generate+ "sample" "period" INT "for" INT ";";
	public PeriodicSensorsElements getPeriodicSensorsAccess() {
		return pPeriodicSensors;
	}
	
	public ParserRule getPeriodicSensorsRule() {
		return getPeriodicSensorsAccess().getRule();
	}

	/// * Event Driven Sensor Definition * / EventSensors:
	//	sensorName=EntityName generateInfo+=Generate+ "onCondition" eventConditions+=EventConditions ";";
	public EventSensorsElements getEventSensorsAccess() {
		return pEventSensors;
	}
	
	public ParserRule getEventSensorsRule() {
		return getEventSensorsAccess().getRule();
	}

	//EventConditions:
	//	name=ID ("," eventConditions+=EventConditions)?;
	public EventConditionsElements getEventConditionsAccess() {
		return pEventConditions;
	}
	
	public ParserRule getEventConditionsRule() {
		return getEventConditionsAccess().getRule();
	}

	//InBuiltComputationalServiceName:
	//	name=ID;
	public InBuiltComputationalServiceNameElements getInBuiltComputationalServiceNameAccess() {
		return pInBuiltComputationalServiceName;
	}
	
	public ParserRule getInBuiltComputationalServiceNameRule() {
		return getInBuiltComputationalServiceNameAccess().getRule();
	}

	//EntityName:
	//	name=ID;
	public EntityNameElements getEntityNameAccess() {
		return pEntityName;
	}
	
	public ParserRule getEntityNameRule() {
		return getEntityNameAccess().getRule();
	}

	//Generate:
	//	"generate" sourceName=SourceName ":" type=Type ";";
	public GenerateElements getGenerateAccess() {
		return pGenerate;
	}
	
	public ParserRule getGenerateRule() {
		return getGenerateAccess().getRule();
	}

	//SourceName:
	//	name=ID;
	public SourceNameElements getSourceNameAccess() {
		return pSourceName;
	}
	
	public ParserRule getSourceNameRule() {
		return getSourceNameAccess().getRule();
	}

	/// * Actuator Definition * / Actuator:
	//	actuatorName=EntityName actions+=Action*;
	public ActuatorElements getActuatorAccess() {
		return pActuator;
	}
	
	public ParserRule getActuatorRule() {
		return getActuatorAccess().getRule();
	}

	//Action:
	//	"action" actionName=ActionName "(" parameters+=Parameters* ")" ";";
	public ActionElements getActionAccess() {
		return pAction;
	}
	
	public ParserRule getActionRule() {
		return getActionAccess().getRule();
	}

	//ActionName:
	//	name=ID;
	public ActionNameElements getActionNameAccess() {
		return pActionName;
	}
	
	public ParserRule getActionNameRule() {
		return getActionNameAccess().getRule();
	}

	//Parameters:
	//	parameterName=ParameterName ":" type=Type;
	public ParametersElements getParametersAccess() {
		return pParameters;
	}
	
	public ParserRule getParametersRule() {
		return getParametersAccess().getRule();
	}

	//ParameterName:
	//	name=ID;
	public ParameterNameElements getParameterNameAccess() {
		return pParameterName;
	}
	
	public ParserRule getParameterNameRule() {
		return getParameterNameAccess().getRule();
	}

	/// *  Storage Service Definition  * / StorageService:
	//	storageServiceName=EntityName dataAccesses+=DataAccess*;
	public StorageServiceElements getStorageServiceAccess() {
		return pStorageService;
	}
	
	public ParserRule getStorageServiceRule() {
		return getStorageServiceAccess().getRule();
	}

	//DataAccess:
	//	"generate" sourceName=SourceName ":" dataAccessType=Type "accessed-by" dataItem=ID ":" type=Type ";"
	//	actions+=Action*;
	public DataAccessElements getDataAccessAccess() {
		return pDataAccess;
	}
	
	public ParserRule getDataAccessRule() {
		return getDataAccessAccess().getRule();
	}

	/// * Type Definition * / Type:
	//	primitiveDataType=PrimitiveDataType;
	public TypeElements getTypeAccess() {
		return pType;
	}
	
	public ParserRule getTypeRule() {
		return getTypeAccess().getRule();
	}

	//OperationName:
	//	OPERATION_NAME="AVG_BY_SAMPLE";
	public OperationNameElements getOperationNameAccess() {
		return pOperationName;
	}
	
	public ParserRule getOperationNameRule() {
		return getOperationNameAccess().getRule();
	}

	//PrimitiveDataType:
	//	INTEGER="Integer" | BOOLEAN="boolean" | STRING="String" | LONG="long" | DOUBLE="double" | structDef=[Struct];
	public PrimitiveDataTypeElements getPrimitiveDataTypeAccess() {
		return pPrimitiveDataType;
	}
	
	public ParserRule getPrimitiveDataTypeRule() {
		return getPrimitiveDataTypeAccess().getRule();
	}

	//terminal ID:
	//	"^"? ("a".."z" | "A".."Z" | "_") ("a".."z" | "A".."Z" | "_" | "0".."9")*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	} 

	//terminal INT returns ecore::EInt:
	//	"0".."9"+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	} 

	//terminal STRING:
	//	"\"" ("\\" . / * 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' * / | !("\\" | "\""))* "\"" | "\'" ("\\" .
	//	/ * 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' * / | !("\\" | "\'"))* "\'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	} 

	//terminal ML_COMMENT:
	//	"/ *"->"* /";
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	} 

	//terminal SL_COMMENT:
	//	"//" !("\n" | "\r")* ("\r"? "\n")?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	} 

	//terminal WS:
	//	(" " | "\t" | "\r" | "\n")+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	} 

	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	} 
}
